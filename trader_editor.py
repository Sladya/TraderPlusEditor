import sys
import json
import os
from typing import Dict, List, Any
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QLabel, QLineEdit, QCheckBox, QPushButton,
                             QTreeWidget, QTreeWidgetItem, QMenuBar, QStatusBar,
                             QFileDialog, QMessageBox, QInputDialog, QDialog,
                             QFormLayout, QHeaderView, QMenu,
                             QAction, QProgressBar, QSplitter, QTextEdit, QSizePolicy)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer, QSettings
from PyQt5.QtGui import QFont, QIcon, QPalette, QColor, QKeySequence, QPixmap

class TraderPlusEditor(QMainWindow):
    def __init__(self):
        super().__init__()
        
        # –î–∞–Ω–Ω—ã–µ
        self.config_data = {}
        self.current_file = ""
        self.file_type = "price"  # "price" –∏–ª–∏ "general"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.setWindowTitle("TraderPlusEditor")
        self.setGeometry(100, 100, 1000, 800)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –æ–∫–Ω–∞
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ —Ñ–∞–π–ª–∞
            icon_path = os.path.join(os.path.dirname(__file__), 'icon.ico')
            if os.path.exists(icon_path):
                self.setWindowIcon(QIcon(icon_path))
                print(f"–ò–∫–æ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {icon_path}")
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
                print(f"–§–∞–π–ª –∏–∫–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {icon_path}")
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
                pixmap = QPixmap(32, 32)
                pixmap.fill(QColor(52, 152, 219))  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
                self.setWindowIcon(QIcon(pixmap))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            pixmap = QPixmap(32, 32)
            pixmap.fill(QColor(52, 152, 219))
            self.setWindowIcon(QIcon(pixmap))
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        self.setMinimumSize(1100, 800)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.setup_application_style()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_interface()
        self.setup_drag_drop()
        
    def setup_application_style(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            
            QLabel {
                font-size: 13px;
                color: #333;
            }
            
            QLineEdit {
                font-size: 13px;
                padding: 8px 12px;
                border: 2px solid #ddd;
                border-radius: 6px;
                background-color: white;
            }
            
            QLineEdit:focus {
                border-color: #4CAF50;
                outline: none;
            }
            
            QPushButton {
                font-size: 13px;
                font-weight: bold;
                padding: 10px 20px;
                border: none;
                border-radius: 6px;
                background-color: #4CAF50;
                color: white;
                min-width: 100px;
            }
            
            QPushButton:hover {
                background-color: #45a049;
            }
            
            QPushButton:pressed {
                background-color: #3d8b40;
            }
            
            QTreeWidget {
                font-size: 13px;
                border: 1px solid #ddd;
                border-radius: 6px;
                background-color: white;
                alternate-background-color: #f8f9fa;
                selection-background-color: #e3f2fd;
            }
            
            QTreeWidget::item {
                padding: 8px;
                border-bottom: 1px solid #eeeeee;
            }
            
            QTreeWidget::item:selected {
                background-color: #2196F3;
                color: white;
            }
            
            QTreeWidget::item:hover {
                background-color: #e8f4f8;
            }
            
            QHeaderView::section {
                font-size: 14px;
                font-weight: bold;
                padding: 12px;
                border: none;
                border-right: 1px solid #ddd;
                border-bottom: 2px solid #4CAF50;
                background-color: #fafafa;
            }
            
            QStatusBar {
                font-size: 12px;
                background-color: #eeeeee;
                border-top: 1px solid #ddd;
                padding: 5px;
            }
            

        """)
        
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ (—Å–æ–∑–¥–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ)
        self.file_info_label = QLabel("üìÑ –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        self.file_info_label.setStyleSheet("""
            QLabel {
                font-size: 13px;
                color: #7f8c8d;
                background-color: #ecf0f1;
                padding: 8px 15px;
                border-radius: 6px;
                border: 1px solid #bdc3c7;
            }
        """)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(20, 15, 20, 15)  # –û—Ç—Å—Ç—É–ø—ã –æ—Ç –∫—Ä–∞–µ–≤
        main_layout.setSpacing(15)  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫
        header_layout = self.create_header_section()
        main_layout.addLayout(header_layout)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.content_container = QWidget()
        content_layout = QVBoxLayout(self.content_container)
        content_layout.setContentsMargins(0, 0, 0, 0)
        content_layout.setSpacing(10)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.create_category_table()
        content_layout.addWidget(self.category_table)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞)
        self.drag_hint_label = QLabel()
        self.drag_hint_label.setAlignment(Qt.AlignCenter)
        self.drag_hint_label.setWordWrap(True)
        self.drag_hint_label.setMinimumHeight(150)
        self.drag_hint_label.setMaximumHeight(200)
        self.drag_hint_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.drag_hint_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                color: #3498db;
                background-color: #f8f9fa;
                padding: 40px 30px;
                border: 3px dashed #3498db;
                border-radius: 15px;
                margin: 10px;
                font-weight: bold;
            }
        """)
        self.drag_hint_label.setText("üìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TraderPlus —Å—é–¥–∞\n\n"
                                   "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:\n\n"
                                   "TraderPlusPriceConfig.json\n"
                                   "TraderPlusGeneralConfig.json\n"
                                   "TraderPlusIDsConfig.json")
        content_layout.addWidget(self.drag_hint_label)
        
        main_layout.addWidget(self.content_container)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = self.create_buttons_section()
        main_layout.addLayout(buttons_layout)
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.setStyleSheet("""
            QStatusBar {
                font-size: 13px;
                background-color: #34495e;
                color: white;
                border-top: 2px solid #3498db;
                padding: 8px;
                font-weight: bold;
            }
        """)
        self.status_bar.showMessage("üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.show_drag_drop_hint()
        

    def create_header_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–æ–∏—Å–∫–∞"""
        header_layout = QHBoxLayout()
        
        # –ü–æ–∏—Å–∫
        search_label = QLabel("üîç –ü–æ–∏—Å–∫:")
        search_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #34495e;
                margin-right: 5px;
            }
        """)
        header_layout.addWidget(search_label)
        
        self.search_entry = QLineEdit()
        self.search_entry.setMinimumWidth(300)
        self.search_entry.setMaximumWidth(400)
        self.search_entry.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        self.search_entry.textChanged.connect(self.on_search_change)
        self.search_entry.setStyleSheet("""
            QLineEdit {
                font-size: 14px;
                padding: 12px 16px;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                background-color: white;
            }
            
            QLineEdit:focus {
                border-color: #3498db;
                box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
            }
        """)
        header_layout.addWidget(self.search_entry)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        clear_button.clicked.connect(self.clear_search)
        clear_button.setStyleSheet("""
            QPushButton {
                font-size: 13px;
                font-weight: bold;
                padding: 12px 20px;
                border: none;
                border-radius: 8px;
                background-color: #e74c3c;
                color: white;
                margin-left: 10px;
            }
            
            QPushButton:hover {
                background-color: #c0392b;
            }
            
            QPushButton:pressed {
                background-color: #a93226;
            }
        """)
        header_layout.addWidget(clear_button)
        
        header_layout.addStretch()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        header_layout.addWidget(self.file_info_label)
        
        return header_layout
        
    def create_category_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.category_table = QTreeWidget()
        self.category_table.setHeaderLabels(["üìÇ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö"])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        header = self.category_table.header()
        header.setSectionResizeMode(0, QHeaderView.Interactive)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        self.category_table.setColumnWidth(0, 500)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        self.category_table.setAlternatingRowColors(True)
        self.category_table.setRootIsDecorated(False)
        self.category_table.setSelectionBehavior(QTreeWidget.SelectRows)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
        self.category_table.setStyleSheet("""
            QTreeWidget {
                font-size: 14px;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                background-color: white;
                alternate-background-color: #f8f9fa;
                selection-background-color: #3498db;
                gridline-color: #ecf0f1;
            }
            
            QTreeWidget::item {
                padding: 12px 8px;
                border-bottom: 1px solid #ecf0f1;
                font-size: 14px;
            }
            
            QTreeWidget::item:selected {
                background-color: #3498db;
                color: white;
                font-weight: bold;
            }
            
            QTreeWidget::item:hover {
                background-color: #e8f4f8;
                color: #2c3e50;
            }
            
            QHeaderView::section {
                font-size: 15px;
                font-weight: bold;
                padding: 15px 10px;
                border: none;
                border-right: 1px solid #bdc3c7;
                border-bottom: 3px solid #3498db;
                background-color: #ecf0f1;
                color: #2c3e50;
            }
            
            QHeaderView::section:hover {
                background-color: #d5dbdb;
            }
        """)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        self.category_table.itemDoubleClicked.connect(self.on_category_double_click)
        
    def show_drag_drop_hint(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤"""
        # –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ –≤—Å—ë –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        self.category_table.hide()
        self.drag_hint_label.show()
        
        # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.drag_hint_label.setMinimumHeight(600)
        self.drag_hint_label.setMaximumHeight(16777215)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    def create_buttons_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫"""
        buttons_layout = QHBoxLayout()
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_style = """
            QPushButton {
                font-size: 14px;
                font-weight: bold;
                padding: 15px 25px;
                border: none;
                border-radius: 8px;
                color: white;
                margin: 5px;
                min-width: 150px;
            }
        """
        
        self.add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        self.add_button.clicked.connect(self.add_category)
        self.add_button.setStyleSheet(button_style + """
            QPushButton {
                background-color: #27ae60;
            }
            QPushButton:hover {
                background-color: #229954;
            }
            QPushButton:pressed {
                background-color: #1e8449;
            }
        """)
        buttons_layout.addWidget(self.add_button)
        
        self.delete_button = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        self.delete_button.clicked.connect(self.delete_category)
        self.delete_button.setStyleSheet(button_style + """
            QPushButton {
                background-color: #e74c3c;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:pressed {
                background-color: #a93226;
            }
        """)
        buttons_layout.addWidget(self.delete_button)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_button.clicked.connect(self.save_file)
        save_button.setStyleSheet(button_style + """
            QPushButton {
                background-color: #f39c12;
            }
            QPushButton:hover {
                background-color: #e67e22;
            }
            QPushButton:pressed {
                background-color: #d35400;
            }
        """)
        buttons_layout.addWidget(save_button)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
        unload_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª")
        unload_button.clicked.connect(self.unload_file)
        unload_button.setStyleSheet(button_style + """
            QPushButton {
                background-color: #9b59b6;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
            QPushButton:pressed {
                background-color: #7d3c98;
            }
        """)
        buttons_layout.addWidget(unload_button)
        
        buttons_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"
        about_button = QPushButton("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_button.clicked.connect(self.show_about_dialog)
        about_button.setStyleSheet(button_style + """
            QPushButton {
                background-color: #3498db;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
        """)
        buttons_layout.addWidget(about_button)
        
        return buttons_layout
        
    def unload_file(self):
        """–í—ã–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        if not self.config_data:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
            
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.config_data = {}
        self.current_file = ""
        self.file_type = "price"
        
        # –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
        self.search_entry.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —Å–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.show_drag_drop_hint()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        self.file_info_label.setText("üìÑ –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        self.file_info_label.setStyleSheet("""
            QLabel {
                font-size: 13px;
                color: #7f8c8d;
                background-color: #ecf0f1;
                padding: 8px 15px;
                border-radius: 6px;
                border: 1px solid #bdc3c7;
            }
        """)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.update_button_labels()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_bar.showMessage("üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    def setup_drag_drop(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag and drop"""
        self.setAcceptDrops(True)
        
    def dragEnterEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()
            
    def dropEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞"""
        files = [u.toLocalFile() for u in event.mimeData().urls()]
        if files and files[0].lower().endswith('.json'):
            self.load_file(files[0])
        else:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JSON —Ñ–∞–π–ª—ã")
            
    def load_file(self, filename):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                self.config_data = json.load(f)
            self.current_file = filename
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            self.detect_file_type()
            
            # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.drag_hint_label.hide()
            self.category_table.show()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–¥—Å–∫–∞–∑–∫–∏
            self.drag_hint_label.setMinimumHeight(150)
            self.drag_hint_label.setMaximumHeight(200)
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.category_table.clear()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if self.file_type == "price":
                self.filter_categories()
            elif self.file_type == "general":
                self.filter_traders()
            else:
                self.filter_ids()
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
            self.update_button_labels()
                
            self.file_info_label.setText(f"üìÑ {os.path.basename(filename)}")
            self.file_info_label.setStyleSheet("""
                QLabel {
                    font-size: 13px;
                    color: #27ae60;
                    background-color: #d5f4e6;
                    padding: 8px 15px;
                    border-radius: 6px;
                    border: 1px solid #27ae60;
                    font-weight: bold;
                }
            """)
            self.status_bar.showMessage(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {os.path.basename(filename)}")
            self.auto_save()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {str(e)}")
            
    def detect_file_type(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if 'TraderCategories' in self.config_data:
            self.file_type = "price"
        elif 'Traders' in self.config_data:
            self.file_type = "general"
        elif 'IDs' in self.config_data:
            self.file_type = "ids"
        else:
            self.file_type = "unknown"
            

            
    def update_button_labels(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        if self.file_type == "price":
            self.add_button.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            self.delete_button.setText("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        elif self.file_type == "general":
            self.add_button.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—Ü–∞")
            self.delete_button.setText("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—Ü–∞")
        else:
            self.add_button.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å ID —Ç–æ—Ä–≥–æ–≤—Ü–∞")
            self.delete_button.setText("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ID —Ç–æ—Ä–≥–æ–≤—Ü–∞")
            

                
    def filter_categories(self):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search_text = self.search_entry.text().lower().strip()
        
        self.category_table.clear()
        
        if 'TraderCategories' in self.config_data:
            display_index = 0
            for category in self.config_data['TraderCategories']:
                category_name = category['CategoryName']
                product_count = len(category['Products'])
                show_category = False
                found_in_products = False
                
                # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
                if not search_text:
                    show_category = True
                else:
                    # –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    if search_text in category_name.lower():
                        show_category = True
                    
                    # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
                    if not show_category:
                        for product in category['Products']:
                            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞
                            parts = product.split(',')
                            if len(parts) >= 6:
                                product_text = ','.join(parts).lower()
                                if search_text in product_text:
                                    show_category = True
                                    found_in_products = True
                                    break
                
                if show_category:
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_name = category_name
                    product_info = f"–¢–æ–≤–∞—Ä–æ–≤: {product_count}"
                    
                    if search_text and found_in_products:
                        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        for product in category['Products']:
                            parts = product.split(',')
                            if len(parts) >= 6:
                                product_text = ','.join(parts).lower()
                                if search_text in product_text:
                                    # –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
                                    classname = parts[0]
                                    buy_price = parts[4]
                                    sell_price = parts[5]
                                    product_info = f"{classname} | –ü–æ–∫—É–ø–∫–∞:{buy_price} | –ü—Ä–æ–¥–∞–∂–∞:{sell_price}"
                                    display_name = f"{category_name} ‚òÖ"
                                    break
                    
                    item = QTreeWidgetItem([display_name, product_info])
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
                    if search_text and "‚òÖ" in display_name:
                        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ - —è—Ä–∫–∏–π –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ü–≤–µ—Ç
                        item.setBackground(0, QColor(255, 193, 7))  # –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
                        item.setBackground(1, QColor(255, 193, 7))
                        item.setForeground(0, QColor(33, 37, 41))   # –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
                        item.setForeground(1, QColor(33, 37, 41))
                        font = QFont()
                        font.setBold(True)
                        font.setPointSize(14)
                        item.setFont(0, font)
                        item.setFont(1, font)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫ —Ç–æ–≤–∞—Ä—É
                        if "‚òÖ" not in display_name:
                            item.setText(0, f"‚≠ê {display_name}")
                    else:
                        # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ
                        if display_index % 2 == 0:
                            item.setBackground(0, QColor(248, 249, 250))  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
                            item.setBackground(1, QColor(248, 249, 250))
                        else:
                            item.setBackground(0, QColor(255, 255, 255))  # –ë–µ–ª—ã–π
                            item.setBackground(1, QColor(255, 255, 255))
                    
                    self.category_table.addTopLevelItem(item)
                    display_index += 1
                        
    def filter_traders(self):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search_text = self.search_entry.text().lower().strip()
        
        self.category_table.clear()
        
        if 'Traders' in self.config_data:
            display_index = 0
            for trader in self.config_data['Traders']:
                trader_name = trader.get('GivenName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                trader_role = trader.get('Role', '–¢–æ—Ä–≥–æ–≤–µ—Ü')
                trader_id = trader.get('Id', -1)
                show_trader = False
                
                # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
                if not search_text:
                    show_trader = True
                else:
                    # –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤—Ü–∞
                    if search_text in trader_name.lower():
                        show_trader = True
                    # –ü–æ–∏—Å–∫ –≤ —Ä–æ–ª–∏
                    elif search_text in trader_role.lower():
                        show_trader = True
                    # –ü–æ–∏—Å–∫ –≤ ID
                    elif search_text in str(trader_id):
                        show_trader = True
                
                if show_trader:
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_name = trader_name
                    trader_info = f"ID: {trader_id} | –†–æ–ª—å: {trader_role}"
                    
                    if search_text and (search_text in trader_name.lower() or 
                                      search_text in trader_role.lower() or 
                                      search_text in str(trader_id)):
                        display_name = f"{trader_name} ‚òÖ"
                    
                    item = QTreeWidgetItem([display_name, trader_info])
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
                    if search_text and "‚òÖ" in display_name:
                        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ - —è—Ä–∫–∏–π –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ü–≤–µ—Ç
                        item.setBackground(0, QColor(255, 193, 7))  # –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
                        item.setBackground(1, QColor(255, 193, 7))
                        item.setForeground(0, QColor(33, 37, 41))   # –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
                        item.setForeground(1, QColor(33, 37, 41))
                        font = QFont()
                        font.setBold(True)
                        font.setPointSize(14)
                        item.setFont(0, font)
                        item.setFont(1, font)
                    else:
                        # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ
                        if display_index % 2 == 0:
                            item.setBackground(0, QColor(248, 249, 250))  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
                            item.setBackground(1, QColor(248, 249, 250))
                        else:
                            item.setBackground(0, QColor(255, 255, 255))  # –ë–µ–ª—ã–π
                            item.setBackground(1, QColor(255, 255, 255))
                    
                    self.category_table.addTopLevelItem(item)
                    display_index += 1
                    
    def filter_ids(self):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ID —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search_text = self.search_entry.text().lower().strip()
        
        self.category_table.clear()
        
        if 'IDs' in self.config_data:
            display_index = 0
            for trader_id in self.config_data['IDs']:
                trader_id_value = trader_id.get('Id', -1)
                categories = trader_id.get('Categories', [])
                categories_count = len(categories)
                show_trader = False
                
                # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
                if not search_text:
                    show_trader = True
                else:
                    # –ü–æ–∏—Å–∫ –≤ ID —Ç–æ—Ä–≥–æ–≤—Ü–∞
                    if search_text in str(trader_id_value):
                        show_trader = True
                    # –ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
                    else:
                        for category in categories:
                            if search_text in category.lower():
                                show_trader = True
                                break
                
                if show_trader:
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_name = f"ID: {trader_id_value}"
                    trader_info = f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}"
                    
                    if search_text and (search_text in str(trader_id_value) or 
                                      any(search_text in cat.lower() for cat in categories)):
                        display_name = f"ID: {trader_id_value} ‚òÖ"
                    
                    item = QTreeWidgetItem([display_name, trader_info])
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
                    if search_text and "‚òÖ" in display_name:
                        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ - —è—Ä–∫–∏–π –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ü–≤–µ—Ç
                        item.setBackground(0, QColor(255, 193, 7))  # –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
                        item.setBackground(1, QColor(255, 193, 7))
                        item.setForeground(0, QColor(33, 37, 41))   # –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
                        item.setForeground(1, QColor(33, 37, 41))
                        font = QFont()
                        font.setBold(True)
                        font.setPointSize(14)
                        item.setFont(0, font)
                        item.setFont(1, font)
                    else:
                        # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ
                        if display_index % 2 == 0:
                            item.setBackground(0, QColor(248, 249, 250))  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
                            item.setBackground(1, QColor(248, 249, 250))
                        else:
                            item.setBackground(0, QColor(255, 255, 255))  # –ë–µ–ª—ã–π
                            item.setBackground(1, QColor(255, 255, 255))
                    
                    self.category_table.addTopLevelItem(item)
                    display_index += 1
                    
    def on_search_change(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        if self.file_type == "price":
            self.filter_categories()
        elif self.file_type == "general":
            self.filter_traders()
        else:
            self.filter_ids()
        
    def clear_search(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        self.search_entry.clear()
        self.search_entry.setFocus()
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        if not self.config_data:
            self.show_drag_drop_hint()
        

    def on_category_double_click(self, item):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ç–æ—Ä–≥–æ–≤—Ü—É"""
        if not item or not self.config_data:
            return
            
        item_name = item.text(0)
        
        # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if item_name.endswith(" ‚òÖ"):
            item_name = item_name[:-2]
        
        if self.file_type == "price":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ —Ü–µ–Ω
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_index = None
            for i, category in enumerate(self.config_data['TraderCategories']):
                if category['CategoryName'] == item_name:
                    category_index = i
                    break
            
            if category_index is not None:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                search_text = self.search_entry.text().strip()
            
            # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            if search_text and "‚òÖ" in item.text(0):
                category = self.config_data['TraderCategories'][category_index]
                for product_index, product in enumerate(category['Products']):
                    parts = product.split(',')
                    if len(parts) >= 6:
                        # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö —Ç–æ–≤–∞—Ä–∞
                        product_text = f"{parts[0]},{parts[1]},{parts[2]},{parts[3]},{parts[4]},{parts[5]}".lower()
                        if search_text.lower() in product_text:
                            # –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä! –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
                            self.edit_product_dialog(category_index, product_index, product)
                            return
            
            # –û–±—ã—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            self.open_product_window(category_index, item_name, search_text)
        elif self.file_type == "general":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ general
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–æ—Ä–≥–æ–≤—Ü–∞
            trader_index = None
            for i, trader in enumerate(self.config_data['Traders']):
                if trader.get('GivenName', '') == item_name:
                    trader_index = i
                    break
            
            if trader_index is not None:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–∞
                self.edit_trader_dialog(trader_index)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ IDs
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: "ID: X")
            if item_name.startswith("ID: "):
                try:
                    trader_id_value = int(item_name[4:])  # –£–±–∏—Ä–∞–µ–º "ID: "
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–æ—Ä–≥–æ–≤—Ü–∞ –ø–æ ID
                    trader_index = None
                    for i, trader_id in enumerate(self.config_data['IDs']):
                        if trader_id.get('Id') == trader_id_value:
                            trader_index = i
                            break
                    
                    if trader_index is not None:
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ID —Ç–æ—Ä–≥–æ–≤—Ü–∞
                        self.edit_trader_id_dialog(trader_index)
                except ValueError:
                    pass
                
    def edit_trader_dialog(self, trader_index):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–∞"""
        trader = self.config_data['Traders'][trader_index]
        dialog = TraderEditDialog(self, trader)
        if dialog.exec_() == QDialog.Accepted:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            updated_trader = dialog.get_trader_data()
            self.config_data['Traders'][trader_index] = updated_trader
            
            self.filter_traders()
            self.auto_save()
            self.status_bar.showMessage("–¢–æ—Ä–≥–æ–≤–µ—Ü –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
            
    def edit_trader_id_dialog(self, trader_index):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ID —Ç–æ—Ä–≥–æ–≤—Ü–∞"""
        trader_id_data = self.config_data['IDs'][trader_index]
        dialog = TraderIDEditDialog(self, trader_id_data)
        if dialog.exec_() == QDialog.Accepted:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            updated_trader_id = dialog.get_trader_id_data()
            self.config_data['IDs'][trader_index] = updated_trader_id
            
            self.filter_ids()
            self.auto_save()
            self.status_bar.showMessage("ID —Ç–æ—Ä–≥–æ–≤—Ü–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
            
    def edit_product_dialog(self, category_index, product_index, product_str):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        dialog = ProductEditDialog(self, product_str)
        if dialog.exec_() == QDialog.Accepted:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            new_product_str = dialog.get_product_string()
            category = self.config_data['TraderCategories'][category_index]
            category['Products'][product_index] = new_product_str
            
            self.filter_categories()
            self.auto_save()
            self.status_bar.showMessage("–¢–æ–≤–∞—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ –ø–æ–∏—Å–∫–∞")
            
    def open_product_window(self, category_index, category_name, search_text=""):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        window = ProductWindow(self, self.config_data, category_index, category_name, search_text)
        window.exec_()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.filter_categories()
        self.auto_save()
        
    def add_category(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ç–æ—Ä–≥–æ–≤—Ü–∞"""
        if self.file_type == "price":
            name, ok = QInputDialog.getText(self, '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
            if ok and name:
                new_category = {
                    "CategoryName": name,
                    "Products": []
                }
                if 'TraderCategories' not in self.config_data:
                    self.config_data['TraderCategories'] = []
                self.config_data['TraderCategories'].append(new_category)
                self.filter_categories()
                self.auto_save()
                self.status_bar.showMessage(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name}")
        elif self.file_type == "general":
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞
            self.add_trader()
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ ID —Ç–æ—Ä–≥–æ–≤—Ü–∞
            self.add_trader_id()
            
    def add_trader(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞"""
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü
        new_trader = {
            "Id": len(self.config_data.get('Traders', [])),
            "Name": "pr_npc_neutrals",
            "GivenName": "–ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü",
            "Role": "–¢–æ—Ä–≥–æ–≤–µ—Ü",
            "Position": [0, 0, 0],
            "Orientation": [0, 0, 0],
            "Clothes": []
        }
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        dialog = TraderEditDialog(self, new_trader)
        if dialog.exec_() == QDialog.Accepted:
            updated_trader = dialog.get_trader_data()
            
            if 'Traders' not in self.config_data:
                self.config_data['Traders'] = []
            self.config_data['Traders'].append(updated_trader)
            
            self.filter_traders()
            self.auto_save()
            self.status_bar.showMessage(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ—Ä–≥–æ–≤–µ—Ü: {updated_trader['GivenName']}")
            
    def add_trader_id(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ ID —Ç–æ—Ä–≥–æ–≤—Ü–∞"""
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π ID —Ç–æ—Ä–≥–æ–≤—Ü–∞
        new_trader_id = {
            "Id": len(self.config_data.get('IDs', [])),
            "Categories": [],
            "LicencesRequired": [],
            "CurrenciesAccepted": []
        }
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        dialog = TraderIDEditDialog(self, new_trader_id)
        if dialog.exec_() == QDialog.Accepted:
            updated_trader_id = dialog.get_trader_id_data()
            
            if 'IDs' not in self.config_data:
                self.config_data['IDs'] = []
            self.config_data['IDs'].append(updated_trader_id)
            
            self.filter_ids()
            self.auto_save()
            self.status_bar.showMessage(f"–î–æ–±–∞–≤–ª–µ–Ω ID —Ç–æ—Ä–≥–æ–≤—Ü–∞: {updated_trader_id['Id']}")
            
    def delete_category(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ç–æ—Ä–≥–æ–≤—Ü–∞"""
        current_item = self.category_table.currentItem()
        if not current_item:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        item_name = current_item.text(0)
        if item_name.endswith(" ‚òÖ"):
            item_name = item_name[:-2]
        
        if self.file_type == "price":
            reply = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
                                       f"–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{item_name}' –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–µ–π?",
                                       QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                for i, category in enumerate(self.config_data['TraderCategories']):
                    if category['CategoryName'] == item_name:
                        del self.config_data['TraderCategories'][i]
                        break
                
                self.filter_categories()
                self.auto_save()
                self.status_bar.showMessage(f"–£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {item_name}")
        elif self.file_type == "general":
            reply = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
                                       f"–£–¥–∞–ª–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—Ü–∞ '{item_name}'?",
                                       QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—Ü–∞
                for i, trader in enumerate(self.config_data['Traders']):
                    if trader.get('GivenName', '') == item_name:
                        del self.config_data['Traders'][i]
                        break
                
                self.filter_traders()
                self.auto_save()
                self.status_bar.showMessage(f"–£–¥–∞–ª–µ–Ω —Ç–æ—Ä–≥–æ–≤–µ—Ü: {item_name}")
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ ID —Ç–æ—Ä–≥–æ–≤—Ü–∞
            if item_name.startswith("ID: "):
                try:
                    trader_id_value = int(item_name[4:])  # –£–±–∏—Ä–∞–µ–º "ID: "
                    reply = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
                                               f"–£–¥–∞–ª–∏—Ç—å ID —Ç–æ—Ä–≥–æ–≤—Ü–∞ '{trader_id_value}'?",
                                               QMessageBox.Yes | QMessageBox.No)
                    
                    if reply == QMessageBox.Yes:
                        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º ID —Ç–æ—Ä–≥–æ–≤—Ü–∞
                        for i, trader_id in enumerate(self.config_data['IDs']):
                            if trader_id.get('Id') == trader_id_value:
                                del self.config_data['IDs'][i]
                                break
                        
                        self.filter_ids()
                        self.auto_save()
                        self.status_bar.showMessage(f"–£–¥–∞–ª–µ–Ω ID —Ç–æ—Ä–≥–æ–≤—Ü–∞: {trader_id_value}")
                except ValueError:
                    pass
            
    def open_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        filename, _ = QFileDialog.getOpenFileName(
            self, "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "",
            "JSON files (*.json);;All files (*.*)"
        )
        if filename:
            self.load_file(filename)
            
    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if not self.current_file:
            return self.save_file_as()
        
        try:
            with open(self.current_file, 'w', encoding='utf-8') as f:
                json.dump(self.config_data, f, indent=4, ensure_ascii=False)
            self.status_bar.showMessage(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(self.current_file)}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
            
    def save_file_as(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫"""
        filename, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫", "",
            "JSON files (*.json);;All files (*.*)"
        )
        if filename:
            self.current_file = filename
            self.save_file()
            
    def auto_save(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if self.current_file:
            try:
                with open(self.current_file, 'w', encoding='utf-8') as f:
                    json.dump(self.config_data, f, indent=4, ensure_ascii=False)
                self.status_bar.showMessage(f"–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {os.path.basename(self.current_file)}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
                
    def show_about_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        about_text = """
        <div style="text-align: center; padding: 20px;">
            <h2 style="color: #2c3e50; margin-bottom: 15px;">TraderPlusEditor</h2>
            <p style="font-size: 14px; color: #34495e; margin-bottom: 10px;">
                <strong>–í–µ—Ä—Å–∏—è:</strong> 1.0.0
            </p>
            <p style="font-size: 14px; color: #34495e; margin-bottom: 10px;">
                <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–∞ TraderPlus –≤ DayZ
            </p>
            <p style="font-size: 14px; color: #27ae60; margin-bottom: 10px; font-weight: bold;">
                <strong>–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ</strong>
            </p>
            <hr style="border: 1px solid #bdc3c7; margin: 15px 0;">
            <p style="font-size: 14px; color: #34495e; margin-bottom: 10px;">
                <strong>–ê–≤—Ç–æ—Ä:</strong> Sladya
            </p>
            <p style="font-size: 14px; color: #34495e; margin-bottom: 10px;">
                <strong>–°–≤—è–∑—å –≤ :</strong> 
                <a href="https://discord.gg/jdaxza27Db" style="color: #3498db; text-decoration: none;">
                    Discord
                </a>
            </p>
            <p style="font-size: 14px; color: #34495e; margin-bottom: 15px;">
                <strong>GitHub:</strong> 
                <a href="https://github.com/Sladya/TraderPlusEditor" style="color: #3498db; text-decoration: none;">
                    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞
                </a>
            </p>
            <p style="font-size: 12px; color: #7f8c8d; margin-top: 20px;">
                ¬© 2025 TraderPlusEditor. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
            </p>
        </div>
        """
        
        QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)


class ProductWindow(QDialog):
    def __init__(self, parent, config_data, category_index, category_name, search_text=""):
        super().__init__(parent)
        self.parent = parent
        self.config_data = config_data
        self.category_index = category_index
        self.category_name = category_name
        self.search_text = search_text.lower()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∏—Å–∫–µ
        title = f"–¢–æ–≤–∞—Ä—ã: {category_name}"
        if self.search_text:
            title += f" | –ü–æ–∏—Å–∫: '{search_text}'"
        
        self.setWindowTitle(title)
        self.setModal(True)
        self.resize(1400, 800)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –æ–∫–Ω–∞
        try:
            icon_path = os.path.join(os.path.dirname(__file__), 'icon.ico')
            if os.path.exists(icon_path):
                self.setWindowIcon(QIcon(icon_path))
            else:
                pixmap = QPixmap(32, 32)
                pixmap.fill(QColor(52, 152, 219))
                self.setWindowIcon(QIcon(pixmap))
        except Exception as e:
            pixmap = QPixmap(32, 32)
            pixmap.fill(QColor(52, 152, 219))
            self.setWindowIcon(QIcon(pixmap))
        self.setMinimumSize(900, 700)
        
        self.setup_ui()
        self.load_products()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–∫–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏
        header_layout = QHBoxLayout()
        
        title_label = QLabel(f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {self.category_name}")
        title_font = QFont()
        title_font.setBold(True)
        title_font.setPointSize(16)  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä
        title_label.setFont(title_font)
        title_label.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                font-size: 16px;
                font-weight: bold;
                padding: 10px;
                margin: 5px;
            }
        """)
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –æ–∫–Ω–µ —Ç–æ–≤–∞—Ä–æ–≤
        button_style = """
            QPushButton {
                font-size: 14px;
                font-weight: bold;
                padding: 12px 20px;
                border: none;
                border-radius: 8px;
                color: white;
                margin: 5px;
                min-width: 130px;
            }
        """
        
        add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        add_button.clicked.connect(self.add_product)
        add_button.setStyleSheet(button_style + """
            QPushButton {
                background-color: #27ae60;
            }
            QPushButton:hover {
                background-color: #229954;
            }
            QPushButton:pressed {
                background-color: #1e8449;
            }
        """)
        header_layout.addWidget(add_button)
        
        delete_button = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
        delete_button.clicked.connect(self.delete_product)
        delete_button.setStyleSheet(button_style + """
            QPushButton {
                background-color: #e74c3c;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:pressed {
                background-color: #a93226;
            }
        """)
        header_layout.addWidget(delete_button)
        
        layout.addLayout(header_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        self.product_table = QTreeWidget()
        self.product_table.setHeaderLabels([
            "üîπ –ö–ª–∞—Å—Å–Ω–µ–π–º", "‚öôÔ∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "üì¶ –ú–∞–∫—Å. –∑–∞–ø–∞—Å", 
            "üî¢ –ö–æ–ª-–≤–æ", "üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏", "üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        header = self.product_table.header()
        header.setSectionResizeMode(0, QHeaderView.Interactive)  # –ö–ª–∞—Å—Ån–µ–π–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è
        header.setSectionResizeMode(1, QHeaderView.Interactive)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        header.setSectionResizeMode(2, QHeaderView.Interactive)  # –ú–∞–∫—Å. –∑–∞–ø–∞—Å
        header.setSectionResizeMode(3, QHeaderView.Interactive)  # –ö–æ–ª-–≤–æ
        header.setSectionResizeMode(4, QHeaderView.Interactive)  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
        header.setSectionResizeMode(5, QHeaderView.Interactive)  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        self.product_table.setColumnWidth(0, 350)  # –ö–ª–∞—Å—Å–Ω–µ–π–º - —É–≤–µ–ª–∏—á–∏–ª –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        self.product_table.setColumnWidth(1, 150)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        self.product_table.setColumnWidth(2, 150)  # –ú–∞–∫—Å. –∑–∞–ø–∞—Å
        self.product_table.setColumnWidth(3, 120)  # –ö–æ–ª-–≤–æ
        self.product_table.setColumnWidth(4, 150)  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
        self.product_table.setColumnWidth(5, 150)  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        self.product_table.setAlternatingRowColors(True)
        self.product_table.setRootIsDecorated(False)
        self.product_table.setSelectionBehavior(QTreeWidget.SelectRows)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
        self.product_table.setStyleSheet("""
            QTreeWidget {
                font-size: 14px;
                font-family: 'Segoe UI', Arial, sans-serif;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                background-color: white;
                alternate-background-color: #f8f9fa;
                selection-background-color: #3498db;
                gridline-color: #ecf0f1;
                outline: none;
            }
            
            QTreeWidget::item {
                padding: 10px 8px;
                border-bottom: 1px solid #ecf0f1;
                font-size: 14px;
                font-weight: normal;
                height: 32px;
            }
            
            QTreeWidget::item:selected {
                background-color: #3498db;
                color: white;
                font-weight: bold;
            }
            
            QTreeWidget::item:hover {
                background-color: #e8f4f8;
                color: #2c3e50;
            }
            
            QHeaderView::section {
                font-size: 13px;
                font-weight: bold;
                font-family: 'Segoe UI', Arial, sans-serif;
                padding: 12px 8px;
                border: none;
                border-right: 1px solid #bdc3c7;
                border-bottom: 3px solid #3498db;
                background-color: #ecf0f1;
                color: #2c3e50;
                text-align: center;
            }
            
            QHeaderView::section:hover {
                background-color: #d5dbdb;
            }
            
            QHeaderView::section:first {
                text-align: left;
            }
        """)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        self.product_table.itemDoubleClicked.connect(self.edit_product)
        
        layout.addWidget(self.product_table)
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_label = QLabel("üñ±Ô∏è –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
        self.status_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                background-color: #34495e;
                color: white;
                border: 2px solid #3498db;
                border-radius: 6px;
                padding: 10px;
                font-weight: bold;
            }
        """)
        layout.addWidget(self.status_label)
        
    def load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        self.product_table.clear()
        
        category = self.config_data['TraderCategories'][self.category_index]
        display_index = 0
        first_found_item = None
        
        for i, product in enumerate(category['Products']):
            parts = product.split(',')
            if len(parts) >= 6:
                classname = parts[0]
                coefficient = parts[1]
                maxstock = parts[2]
                trade_quantity = parts[3]
                buy_price = parts[4]
                sell_price = parts[5]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –ø–æ–∏—Å–∫—É
                show_product = True
                is_found_item = False
                
                if self.search_text:
                    # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö —Ç–æ–≤–∞—Ä–∞
                    product_text = f"{classname},{coefficient},{maxstock},{trade_quantity},{buy_price},{sell_price}".lower()
                    if self.search_text in product_text:
                        is_found_item = True
                    else:
                        # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                        show_product = False
                
                if show_product:
                    item = QTreeWidgetItem([classname, coefficient, maxstock, trade_quantity, buy_price, sell_price])
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å
                    if is_found_item:
                        # –°—Ç–∏–ª—å –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ - –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π
                        highlight_color = QColor(255, 193, 7)
                        text_color = QColor(33, 37, 41)
                        for col in range(6):
                            item.setBackground(col, highlight_color)
                            item.setForeground(col, text_color)
                        font = QFont()
                        font.setBold(True)
                        font.setPointSize(14)
                        for col in range(6):
                            item.setFont(col, font)
                    else:
                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                        pass  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∏–∑ CSS
                    
                    self.product_table.addTopLevelItem(item)
                    
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–≤—Ç–æ–≤—ã–±–æ—Ä–∞
                    if is_found_item and first_found_item is None:
                        first_found_item = item
                    
                    display_index += 1
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        if first_found_item and self.search_text:
            self.product_table.setCurrentItem(first_found_item)
            self.product_table.scrollToItem(first_found_item)
            
    def edit_product(self, item):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        if not item:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        classname = item.text(0)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
        category = self.config_data['TraderCategories'][self.category_index]
        product_index = None
        product_str = None
        
        for i, product in enumerate(category['Products']):
            if product.split(',')[0] == classname:
                product_index = i
                product_str = product
                break
        
        if product_index is not None and product_str is not None:
            dialog = ProductEditDialog(self, product_str)
            if dialog.exec_() == QDialog.Accepted:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                new_product_str = dialog.get_product_string()
                category['Products'][product_index] = new_product_str
                
                self.load_products()
                self.parent.auto_save()
                self.status_label.setText("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
                
    def add_product(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        dialog = ProductAddDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            new_product_str = dialog.get_product_string()
            
            category = self.config_data['TraderCategories'][self.category_index]
            category['Products'].append(new_product_str)
            
            self.load_products()
            self.parent.auto_save()
            classname = new_product_str.split(',')[0]
            self.status_label.setText(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {classname}")
            
    def delete_product(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        current_item = self.product_table.currentItem()
        if not current_item:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        classname = current_item.text(0)
        
        reply = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 
                                   f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{classname}'?",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            category = self.config_data['TraderCategories'][self.category_index]
            for i, product in enumerate(category['Products']):
                if product.split(',')[0] == classname:
                    del category['Products'][i]
                    break
            
            self.load_products()
            self.parent.auto_save()
            self.status_label.setText(f"üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: {classname}")


class ProductAddDialog(QDialog):
    def __init__(self, parent):
        super().__init__(parent)
        self.setWindowTitle("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        self.setModal(True)
        self.resize(550, 480)
        self.setMinimumSize(500, 450)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –æ–∫–Ω–∞
        try:
            icon_path = os.path.join(os.path.dirname(__file__), 'icon.ico')
            if os.path.exists(icon_path):
                self.setWindowIcon(QIcon(icon_path))
            else:
                pixmap = QPixmap(32, 32)
                pixmap.fill(QColor(52, 152, 219))
                self.setWindowIcon(QIcon(pixmap))
        except Exception as e:
            pixmap = QPixmap(32, 32)
            pixmap.fill(QColor(52, 152, 219))
            self.setWindowIcon(QIcon(pixmap))
        
        self.setup_ui()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2c3e50;
                padding: 10px;
                margin-bottom: 10px;
            }
        """)
        layout.addWidget(title_label)
        
        # –§–æ—Ä–º–∞
        form_layout = QFormLayout()
        form_layout.setSpacing(18)
        form_layout.setVerticalSpacing(15)
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_style = """
            QLineEdit {
                font-size: 14px;
                padding: 12px 15px;
                border: 2px solid #bdc3c7;
                border-radius: 6px;
                background-color: white;
                min-height: 20px;
                max-height: 40px;
            }
            QLineEdit:focus {
                border-color: #3498db;
            }
        """
        
        # –°—Ç–∏–ª—å –¥–ª—è –º–µ—Ç–æ–∫
        label_style = """
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #34495e;
                padding: 5px;
            }
        """
        
        self.classname_edit = QLineEdit()
        self.classname_edit.setStyleSheet(input_style)
        label1 = QLabel("üîπ –ö–ª–∞—Å—Å–Ω–µ–π–º:")
        label1.setStyleSheet(label_style)
        form_layout.addRow(label1, self.classname_edit)
        
        self.coefficient_edit = QLineEdit("1")
        self.coefficient_edit.setStyleSheet(input_style)
        label2 = QLabel("‚öôÔ∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:")
        label2.setStyleSheet(label_style)
        form_layout.addRow(label2, self.coefficient_edit)
        
        self.maxstock_edit = QLineEdit("100")
        self.maxstock_edit.setStyleSheet(input_style)
        label3 = QLabel("üì¶ –ú–∞–∫—Å. –∑–∞–ø–∞—Å:")
        label3.setStyleSheet(label_style)
        form_layout.addRow(label3, self.maxstock_edit)
        
        self.trade_quantity_edit = QLineEdit("1")
        self.trade_quantity_edit.setStyleSheet(input_style)
        label4 = QLabel("üî¢ –ö–æ–ª-–≤–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:")
        label4.setStyleSheet(label_style)
        form_layout.addRow(label4, self.trade_quantity_edit)
        
        self.buy_price_edit = QLineEdit("100")
        self.buy_price_edit.setStyleSheet(input_style)
        label5 = QLabel("üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:")
        label5.setStyleSheet(label_style)
        form_layout.addRow(label5, self.buy_price_edit)
        
        self.sell_price_edit = QLineEdit("50")
        self.sell_price_edit.setStyleSheet(input_style)
        label6 = QLabel("üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:")
        label6.setStyleSheet(label_style)
        form_layout.addRow(label6, self.sell_price_edit)
        
        layout.addLayout(form_layout)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_button.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                font-weight: bold;
                padding: 10px 20px;
                border: none;
                border-radius: 6px;
                background-color: #27ae60;
                color: white;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        save_button.clicked.connect(self.validate_and_accept)
        
        cancel_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        cancel_button.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                font-weight: bold;
                padding: 10px 20px;
                border: none;
                border-radius: 6px;
                background-color: #e74c3c;
                color: white;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        cancel_button.clicked.connect(self.reject)
        
        button_layout.addStretch()
        button_layout.addWidget(save_button)
        button_layout.addWidget(cancel_button)
        layout.addLayout(button_layout)
        
    def validate_and_accept(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        if not all([self.classname_edit.text().strip(), self.coefficient_edit.text().strip(),
                   self.maxstock_edit.text().strip(), self.trade_quantity_edit.text().strip(),
                   self.buy_price_edit.text().strip(), self.sell_price_edit.text().strip()]):
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return
        
        self.accept()
        
    def get_product_string(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–ª–µ–π"""
        return f"{self.classname_edit.text().strip()},{self.coefficient_edit.text().strip()}," \
               f"{self.maxstock_edit.text().strip()},{self.trade_quantity_edit.text().strip()}," \
               f"{self.buy_price_edit.text().strip()},{self.sell_price_edit.text().strip()}"


class ProductEditDialog(QDialog):
    def __init__(self, parent, product_str):
        super().__init__(parent)
        self.product_str = product_str
        self.setWindowTitle("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        self.setModal(True)
        self.resize(550, 480)
        self.setMinimumSize(500, 450)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –æ–∫–Ω–∞
        try:
            icon_path = os.path.join(os.path.dirname(__file__), 'icon.ico')
            if os.path.exists(icon_path):
                self.setWindowIcon(QIcon(icon_path))
            else:
                pixmap = QPixmap(32, 32)
                pixmap.fill(QColor(52, 152, 219))
                self.setWindowIcon(QIcon(pixmap))
        except Exception as e:
            pixmap = QPixmap(32, 32)
            pixmap.fill(QColor(52, 152, 219))
            self.setWindowIcon(QIcon(pixmap))
        
        self.setup_ui()
        self.load_product_data()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2c3e50;
                padding: 10px;
                margin-bottom: 10px;
            }
        """)
        layout.addWidget(title_label)
        
        # –§–æ—Ä–º–∞
        form_layout = QFormLayout()
        form_layout.setSpacing(18)
        form_layout.setVerticalSpacing(15)
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_style = """
            QLineEdit {
                font-size: 14px;
                padding: 12px 15px;
                border: 2px solid #bdc3c7;
                border-radius: 6px;
                background-color: white;
                min-height: 20px;
                max-height: 40px;
            }
            QLineEdit:focus {
                border-color: #3498db;
            }
        """
        
        # –°—Ç–∏–ª—å –¥–ª—è –º–µ—Ç–æ–∫
        label_style = """
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #34495e;
                padding: 5px;
            }
        """
        
        self.classname_edit = QLineEdit()
        self.classname_edit.setStyleSheet(input_style)
        label1 = QLabel("üîπ –ö–ª–∞—Å—Å–Ω–µ–π–º:")
        label1.setStyleSheet(label_style)
        form_layout.addRow(label1, self.classname_edit)
        
        self.coefficient_edit = QLineEdit()
        self.coefficient_edit.setStyleSheet(input_style)
        label2 = QLabel("‚öôÔ∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:")
        label2.setStyleSheet(label_style)
        form_layout.addRow(label2, self.coefficient_edit)
        
        self.maxstock_edit = QLineEdit()
        self.maxstock_edit.setStyleSheet(input_style)
        label3 = QLabel("üì¶ –ú–∞–∫—Å. –∑–∞–ø–∞—Å:")
        label3.setStyleSheet(label_style)
        form_layout.addRow(label3, self.maxstock_edit)
        
        self.trade_quantity_edit = QLineEdit()
        self.trade_quantity_edit.setStyleSheet(input_style)
        label4 = QLabel("üî¢ –ö–æ–ª-–≤–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:")
        label4.setStyleSheet(label_style)
        form_layout.addRow(label4, self.trade_quantity_edit)
        
        self.buy_price_edit = QLineEdit()
        self.buy_price_edit.setStyleSheet(input_style)
        label5 = QLabel("üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:")
        label5.setStyleSheet(label_style)
        form_layout.addRow(label5, self.buy_price_edit)
        
        self.sell_price_edit = QLineEdit()
        self.sell_price_edit.setStyleSheet(input_style)
        label6 = QLabel("üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:")
        label6.setStyleSheet(label_style)
        form_layout.addRow(label6, self.sell_price_edit)
        
        layout.addLayout(form_layout)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_button.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                font-weight: bold;
                padding: 10px 20px;
                border: none;
                border-radius: 6px;
                background-color: #27ae60;
                color: white;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        save_button.clicked.connect(self.accept)
        
        cancel_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        cancel_button.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                font-weight: bold;
                padding: 10px 20px;
                border: none;
                border-radius: 6px;
                background-color: #e74c3c;
                color: white;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        cancel_button.clicked.connect(self.reject)
        
        button_layout.addStretch()
        button_layout.addWidget(save_button)
        button_layout.addWidget(cancel_button)
        layout.addLayout(button_layout)
        
    def load_product_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–ª—è"""
        parts = self.product_str.split(',')
        if len(parts) >= 6:
            self.classname_edit.setText(parts[0])
            self.coefficient_edit.setText(parts[1])
            self.maxstock_edit.setText(parts[2])
            self.trade_quantity_edit.setText(parts[3])
            self.buy_price_edit.setText(parts[4])
            self.sell_price_edit.setText(parts[5])
            
    def get_product_string(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–ª–µ–π"""
        return f"{self.classname_edit.text()},{self.coefficient_edit.text()}," \
               f"{self.maxstock_edit.text()},{self.trade_quantity_edit.text()}," \
               f"{self.buy_price_edit.text()},{self.sell_price_edit.text()}"


class TraderEditDialog(QDialog):
    def __init__(self, parent, trader_data):
        super().__init__(parent)
        self.trader_data = trader_data.copy()
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞")
        self.setModal(True)
        self.resize(500, 400)
        self.setup_ui()
        self.load_trader_data()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –§–æ—Ä–º–∞
        form_layout = QFormLayout()
        
        # –ü–æ–ª—è —Ç–æ—Ä–≥–æ–≤—Ü–∞
        self.id_edit = QLineEdit()
        self.name_edit = QLineEdit()
        self.given_name_edit = QLineEdit()
        self.role_edit = QLineEdit()
        self.position_edit = QLineEdit()
        self.orientation_edit = QLineEdit()
        
        form_layout.addRow("ID:", self.id_edit)
        form_layout.addRow("–ö–ª–∞—Å—Å–Ω–µ–π–º –æ–±—ä–µ–∫—Ç–∞:", self.name_edit)
        form_layout.addRow("–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:", self.given_name_edit)
        form_layout.addRow("–†–æ–ª—å:", self.role_edit)
        form_layout.addRow("–ü–æ–∑–∏—Ü–∏—è (X Y Z):", self.position_edit)
        form_layout.addRow("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (X Y Z):", self.orientation_edit)
        
        layout.addLayout(form_layout)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        
        save_button.clicked.connect(self.accept)
        cancel_button.clicked.connect(self.reject)
        
        button_layout.addWidget(save_button)
        button_layout.addWidget(cancel_button)
        layout.addLayout(button_layout)
        
    def load_trader_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—Ü–∞ –≤ —Ñ–æ—Ä–º—É"""
        self.id_edit.setText(str(self.trader_data.get('Id', '')))
        self.name_edit.setText(self.trader_data.get('Name', ''))
        self.given_name_edit.setText(self.trader_data.get('GivenName', ''))
        self.role_edit.setText(self.trader_data.get('Role', ''))
        
        # –ü–æ–∑–∏—Ü–∏—è
        position = self.trader_data.get('Position', [0, 0, 0])
        if len(position) >= 3:
            position_str = f"{position[0]} {position[1]} {position[2]}"
            self.position_edit.setText(position_str)
        
        # –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
        orientation = self.trader_data.get('Orientation', [0, 0, 0])
        if len(orientation) >= 3:
            orientation_str = f"{orientation[0]} {orientation[1]} {orientation[2]}"
            self.orientation_edit.setText(orientation_str)
            
    def get_trader_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—Ü–∞ –∏–∑ —Ñ–æ—Ä–º—ã"""
        updated_trader = self.trader_data.copy()
        
        try:
            updated_trader['Id'] = int(self.id_edit.text())
        except ValueError:
            updated_trader['Id'] = 0
            
        updated_trader['Name'] = self.name_edit.text()
        updated_trader['GivenName'] = self.given_name_edit.text()
        updated_trader['Role'] = self.role_edit.text()
        
        # –ü–æ–∑–∏—Ü–∏—è
        try:
            position_parts = self.position_edit.text().split()
            if len(position_parts) >= 3:
                x = float(position_parts[0])
                y = float(position_parts[1])
                z = float(position_parts[2])
                updated_trader['Position'] = [x, y, z]
            else:
                updated_trader['Position'] = [0, 0, 0]
        except ValueError:
            updated_trader['Position'] = [0, 0, 0]
        
        # –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
        try:
            orientation_parts = self.orientation_edit.text().split()
            if len(orientation_parts) >= 3:
                x = float(orientation_parts[0])
                y = float(orientation_parts[1])
                z = float(orientation_parts[2])
                updated_trader['Orientation'] = [x, y, z]
            else:
                updated_trader['Orientation'] = [0, 0, 0]
        except ValueError:
            updated_trader['Orientation'] = [0, 0, 0]
            
        return updated_trader


class TraderIDEditDialog(QDialog):
    def __init__(self, parent, trader_id_data):
        super().__init__(parent)
        self.trader_id_data = trader_id_data.copy()
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ID —Ç–æ—Ä–≥–æ–≤—Ü–∞")
        self.setModal(True)
        self.resize(600, 500)
        self.setup_ui()
        self.load_trader_id_data()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –§–æ—Ä–º–∞
        form_layout = QFormLayout()
        
        # –ü–æ–ª—è ID —Ç–æ—Ä–≥–æ–≤—Ü–∞
        self.id_edit = QLineEdit()
        self.categories_edit = QTextEdit()
        self.categories_edit.setMaximumHeight(200)
        
        form_layout.addRow("ID:", self.id_edit)
        form_layout.addRow("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):", self.categories_edit)
        
        layout.addLayout(form_layout)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        
        save_button.clicked.connect(self.accept)
        cancel_button.clicked.connect(self.reject)
        
        button_layout.addWidget(save_button)
        button_layout.addWidget(cancel_button)
        layout.addLayout(button_layout)
        
    def load_trader_id_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ID —Ç–æ—Ä–≥–æ–≤—Ü–∞ –≤ —Ñ–æ—Ä–º—É"""
        self.id_edit.setText(str(self.trader_id_data.get('Id', '')))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = self.trader_id_data.get('Categories', [])
        categories_text = '\n'.join(categories)
        self.categories_edit.setPlainText(categories_text)
        
    def get_trader_id_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ID —Ç–æ—Ä–≥–æ–≤—Ü–∞ –∏–∑ —Ñ–æ—Ä–º—ã"""
        updated_trader_id = self.trader_id_data.copy()
        
        try:
            updated_trader_id['Id'] = int(self.id_edit.text())
        except ValueError:
            updated_trader_id['Id'] = 0
            
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_text = self.categories_edit.toPlainText()
        categories = [cat.strip() for cat in categories_text.split('\n') if cat.strip()]
        updated_trader_id['Categories'] = categories
        
        return updated_trader_id


def main():
    app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —à—Ä–∏—Ñ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    font = QFont()
    font.setPointSize(11)  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    app.setFont(font)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    window = TraderPlusEditor()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()